"use strict"; var Peer = require("./peer").Peer; function PeerManager(e) { var r = {}, o = {}, a = {}; function n(e) { return r => { var a = o[r.currentTarget.id]; a.isDirty && (a.createOffer(e), a.isDirty = !1) } } this.onPeerReady = null, this.init = function (e) { r = e.reduce((e, r) => (e[r.peerId] = r, e), {}) }, this.getPeerStates = function () { return r }, this.getPeerState = function (e) { return r[e] }, this.updatePeerState = function (e) { r[e.peerId] = e }, this.addPeer = function (a, t, s) { return o[a] ? (this.updatePeerState(s), !1) : (o[a] = new Peer(e, a, t.onICECandidate, t.onRemoteTrack, n(t.onOfferCreation), t.statsConfig), r[a] = s, !0) }, this.createPeers = function (a) { for (var t = Object.keys(r), s = 0; s < t.length; s++)console.log("Creating Peer for: " + t[s]), o[t[s]] = new Peer(e, t[s], a.onICECandidate, a.onRemoteTrack, n(a.onOfferCreation), a.statsConfig) }, this.closePeer = function (e, r) { console.log("Closing peer: " + e); var a = o[e]; if (a && (a.close(), delete o[e]), r) for (var n in r) r[n].pc && delete r[n].pc[e] }, this.removePeer = function (e) { console.log("Removing peer: " + e); var a = o[e]; a && (a.close(), delete o[e]), delete r[e] }, this.addLocalStreamToAllPeers = function (e) { for (var r in o) { console.log("Adding local stream to: " + r); var a = o[r]; a.addLocalStream(e), a.isDirty = !0 } }, this.addLocalStreamToPeer = function (e, r, a, n, t) { if (r) console.log("Adding local stream to: " + r), o[r].addLocalStream(e, n, t), o[r].isDirty = a; else for (var s in o) { console.log("Adding local stream to: " + s); var i = o[s]; i.addLocalStream(e, n, t), i.isDirty = a } }, this.removeLocalStreamFromPeer = function (e, r, a) { if (r) console.log("Removing local stream from: " + r), o[r].removeLocalStream(e); else for (var n in o) { console.log("Removing local stream from: " + n); var t = o[n]; t.removeLocalStream(e), t.isDirty = a } }, this.replaceTrack = function (e, r, a) { if (a) o[a].replaceTrack(e, r); else for (var n in o) { console.log("Replacing streams for: " + n); var t = o[n]; t.replaceTrack(e, r), t.isDirty = !0 } }, this.enableDisable = function (e, r, a) { if (r) o[r].enableDisable(e, a); else for (var n in o) { console.log("Enable/Disable streams for: " + n), o[n].enableDisable(e, a) } }, this.removeTrack = function (e) { e && o[e] && o[e].removeTrack("sender") }, this.removeMediaByName = function (e, r) { var o = e.filter(e => e.mediaName == r); o && o[0].sender.replaceTrack(null) }, this.replaceMediaByName = function (e, r, o) { var a = r.filter(e => e.mediaName == o); a && a[0].sender.replaceTrack(e.getVideoTracks()[0]) }, this.isTransceiverExists = function (e) { if (o[e]) return o[e].isTransceiverExists() }, this.addLocalTrack = function (e, r, a) { a && o[a].addTrack(e, r) }, this.processOfferSdpAndGenerateAnswer = function (e, r) { return console.log("Processing offer of: " + e), o[e].processOfferSdpAndGenerateAnswer(r) }, this.processAnswer = function (e, r) { return console.log("Processing answer of: " + e), o[e].processAnswer(r) }, this.queueICECandidate = function (e, o) { console.log("Queuing remote ICE of: " + e), a[e] || (a[e] = []), o = JSON.parse(o), a[e].push(o); var n = r[e]; n && n.iceCandidatesProcessed && this.processICECandidates(e) }, this.processICECandidates = function (e) { if (o[e]) { console.log("Processing ICE candidates of: " + e); var n = a[e]; n && o[e].processICECandidates(n), this.onPeerReady && this.onPeerReady(r[e]), r[e].iceCandidatesProcessed = !0 } } } module.exports.PeerManager = PeerManager;